name: go tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  full-test:
    name: full sdk and tools test
    runs-on: ${{ matrix.os }}
    environment: HELMUNITTEST-BUILD
    strategy:
      matrix:
        # tests for target OS
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: checkout
      # https://github.com/actions/checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: setup go
      # https://github.com/actions/setup-go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ vars.GO_VERSION }}

    # Make results directory
    - name: Install JUnit plugin for uploading testresults
      run: |
        mkdir -p test-results

    # Install using go install
    - name: Install JUnit plugin for uploading testresults
      run: |
        go install github.com/jstemmer/go-junit-report/v2@latest

    # Run tests with nice formatting. Save the coverage and junit test results in test-results
    - name: Run tests
      run: |
        go test ./... -coverprofile=test-results/coverage -v -covermode=atomic 2>&1 | go-junit-report -set-exit-code > test-results/go-test-report.xml

    - name: SonarCloud Scan
      # https://github.com/sonarsource/sonarcloud-github-action
      uses: sonarsource/sonarcloud-github-action@v2.3.0
      if: matrix.os == 'ubuntu-latest'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Upload the original go test log as an artifact for later review.
    - name: Upload test log
      # https://github.com/EnricoMi/publish-unit-test-result-action
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-results/go-test-report.xml

  validate_docker:
    name: build and test docker
    runs-on: ubuntu-latest
    environment: HELMUNITTEST-BUILD
    needs:
      - full-test
    steps:
    - name: checkout
      # https://github.com/actions/checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: setup go
      # https://github.com/actions/setup-go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ vars.GO_VERSION }}

    # Run docker-tests
    - name: Build docker-test
      run: make test-docker

    # Run trivy security
    - name: Run Trivy vulnerability scanner
      # https://github.com/aquasecurity/trivy-action
      uses: aquasecurity/trivy-action@0.20.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        trivy-config: trivy.yaml

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-results.sarif
        